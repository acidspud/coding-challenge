// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/acidspud/coding-challange/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewItemRepository creates a new instance of ItemRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewItemRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ItemRepository {
	mock := &ItemRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ItemRepository is an autogenerated mock type for the ItemRepository type
type ItemRepository struct {
	mock.Mock
}

type ItemRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ItemRepository) EXPECT() *ItemRepository_Expecter {
	return &ItemRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type ItemRepository
func (_mock *ItemRepository) Create(ctx context.Context, item *domain.Item) error {
	ret := _mock.Called(ctx, item)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Item) error); ok {
		r0 = returnFunc(ctx, item)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ItemRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ItemRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - item *domain.Item
func (_e *ItemRepository_Expecter) Create(ctx interface{}, item interface{}) *ItemRepository_Create_Call {
	return &ItemRepository_Create_Call{Call: _e.mock.On("Create", ctx, item)}
}

func (_c *ItemRepository_Create_Call) Run(run func(ctx context.Context, item *domain.Item)) *ItemRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.Item
		if args[1] != nil {
			arg1 = args[1].(*domain.Item)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ItemRepository_Create_Call) Return(err error) *ItemRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ItemRepository_Create_Call) RunAndReturn(run func(ctx context.Context, item *domain.Item) error) *ItemRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type ItemRepository
func (_mock *ItemRepository) Delete(ctx context.Context, id int64) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ItemRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ItemRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *ItemRepository_Expecter) Delete(ctx interface{}, id interface{}) *ItemRepository_Delete_Call {
	return &ItemRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *ItemRepository_Delete_Call) Run(run func(ctx context.Context, id int64)) *ItemRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ItemRepository_Delete_Call) Return(err error) *ItemRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ItemRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id int64) error) *ItemRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Fetch provides a mock function for the type ItemRepository
func (_mock *ItemRepository) Fetch(ctx context.Context) ([]domain.Item, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 []domain.Item
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]domain.Item, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []domain.Item); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Item)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ItemRepository_Fetch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fetch'
type ItemRepository_Fetch_Call struct {
	*mock.Call
}

// Fetch is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ItemRepository_Expecter) Fetch(ctx interface{}) *ItemRepository_Fetch_Call {
	return &ItemRepository_Fetch_Call{Call: _e.mock.On("Fetch", ctx)}
}

func (_c *ItemRepository_Fetch_Call) Run(run func(ctx context.Context)) *ItemRepository_Fetch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ItemRepository_Fetch_Call) Return(items []domain.Item, err error) *ItemRepository_Fetch_Call {
	_c.Call.Return(items, err)
	return _c
}

func (_c *ItemRepository_Fetch_Call) RunAndReturn(run func(ctx context.Context) ([]domain.Item, error)) *ItemRepository_Fetch_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type ItemRepository
func (_mock *ItemRepository) GetByID(ctx context.Context, id int64) (domain.Item, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.Item
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (domain.Item, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) domain.Item); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Item)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ItemRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type ItemRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *ItemRepository_Expecter) GetByID(ctx interface{}, id interface{}) *ItemRepository_GetByID_Call {
	return &ItemRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *ItemRepository_GetByID_Call) Run(run func(ctx context.Context, id int64)) *ItemRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ItemRepository_GetByID_Call) Return(item domain.Item, err error) *ItemRepository_GetByID_Call {
	_c.Call.Return(item, err)
	return _c
}

func (_c *ItemRepository_GetByID_Call) RunAndReturn(run func(ctx context.Context, id int64) (domain.Item, error)) *ItemRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type ItemRepository
func (_mock *ItemRepository) Update(ctx context.Context, item *domain.Item) error {
	ret := _mock.Called(ctx, item)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Item) error); ok {
		r0 = returnFunc(ctx, item)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ItemRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ItemRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - item *domain.Item
func (_e *ItemRepository_Expecter) Update(ctx interface{}, item interface{}) *ItemRepository_Update_Call {
	return &ItemRepository_Update_Call{Call: _e.mock.On("Update", ctx, item)}
}

func (_c *ItemRepository_Update_Call) Run(run func(ctx context.Context, item *domain.Item)) *ItemRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.Item
		if args[1] != nil {
			arg1 = args[1].(*domain.Item)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ItemRepository_Update_Call) Return(err error) *ItemRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ItemRepository_Update_Call) RunAndReturn(run func(ctx context.Context, item *domain.Item) error) *ItemRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
