// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"

import mock "github.com/stretchr/testify/mock"

// CryptoService is an autogenerated mock type for the CryptoService type
type CryptoService struct {
	mock.Mock
}

// CreateMD5Hash provides a mock function with given fields: ctx, plainText
func (_m *CryptoService) CreateMD5Hash(ctx context.Context, plainText string) string {
	ret := _m.Called(ctx, plainText)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, plainText)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// CreatePasswordHash provides a mock function with given fields: ctx, plainPassword
func (_m *CryptoService) CreatePasswordHash(ctx context.Context, plainPassword string) (string, error) {
	ret := _m.Called(ctx, plainPassword)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, plainPassword)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, plainPassword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidatePassword provides a mock function with given fields: ctx, hashedPassword, plainPassword
func (_m *CryptoService) ValidatePassword(ctx context.Context, hashedPassword string, plainPassword string) bool {
	ret := _m.Called(ctx, hashedPassword, plainPassword)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, hashedPassword, plainPassword)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
