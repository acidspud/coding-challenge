// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewCryptoService creates a new instance of CryptoService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCryptoService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CryptoService {
	mock := &CryptoService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// CryptoService is an autogenerated mock type for the CryptoService type
type CryptoService struct {
	mock.Mock
}

type CryptoService_Expecter struct {
	mock *mock.Mock
}

func (_m *CryptoService) EXPECT() *CryptoService_Expecter {
	return &CryptoService_Expecter{mock: &_m.Mock}
}

// CreateMD5Hash provides a mock function for the type CryptoService
func (_mock *CryptoService) CreateMD5Hash(ctx context.Context, plainText string) string {
	ret := _mock.Called(ctx, plainText)

	if len(ret) == 0 {
		panic("no return value specified for CreateMD5Hash")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, plainText)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// CryptoService_CreateMD5Hash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMD5Hash'
type CryptoService_CreateMD5Hash_Call struct {
	*mock.Call
}

// CreateMD5Hash is a helper method to define mock.On call
//   - ctx context.Context
//   - plainText string
func (_e *CryptoService_Expecter) CreateMD5Hash(ctx interface{}, plainText interface{}) *CryptoService_CreateMD5Hash_Call {
	return &CryptoService_CreateMD5Hash_Call{Call: _e.mock.On("CreateMD5Hash", ctx, plainText)}
}

func (_c *CryptoService_CreateMD5Hash_Call) Run(run func(ctx context.Context, plainText string)) *CryptoService_CreateMD5Hash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *CryptoService_CreateMD5Hash_Call) Return(hashedText string) *CryptoService_CreateMD5Hash_Call {
	_c.Call.Return(hashedText)
	return _c
}

func (_c *CryptoService_CreateMD5Hash_Call) RunAndReturn(run func(ctx context.Context, plainText string) string) *CryptoService_CreateMD5Hash_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePasswordHash provides a mock function for the type CryptoService
func (_mock *CryptoService) CreatePasswordHash(ctx context.Context, plainPassword string) (string, error) {
	ret := _mock.Called(ctx, plainPassword)

	if len(ret) == 0 {
		panic("no return value specified for CreatePasswordHash")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, plainPassword)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, plainPassword)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, plainPassword)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// CryptoService_CreatePasswordHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePasswordHash'
type CryptoService_CreatePasswordHash_Call struct {
	*mock.Call
}

// CreatePasswordHash is a helper method to define mock.On call
//   - ctx context.Context
//   - plainPassword string
func (_e *CryptoService_Expecter) CreatePasswordHash(ctx interface{}, plainPassword interface{}) *CryptoService_CreatePasswordHash_Call {
	return &CryptoService_CreatePasswordHash_Call{Call: _e.mock.On("CreatePasswordHash", ctx, plainPassword)}
}

func (_c *CryptoService_CreatePasswordHash_Call) Run(run func(ctx context.Context, plainPassword string)) *CryptoService_CreatePasswordHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *CryptoService_CreatePasswordHash_Call) Return(hashedPassword string, err error) *CryptoService_CreatePasswordHash_Call {
	_c.Call.Return(hashedPassword, err)
	return _c
}

func (_c *CryptoService_CreatePasswordHash_Call) RunAndReturn(run func(ctx context.Context, plainPassword string) (string, error)) *CryptoService_CreatePasswordHash_Call {
	_c.Call.Return(run)
	return _c
}

// ValidatePassword provides a mock function for the type CryptoService
func (_mock *CryptoService) ValidatePassword(ctx context.Context, hashedPassword string, plainPassword string) bool {
	ret := _mock.Called(ctx, hashedPassword, plainPassword)

	if len(ret) == 0 {
		panic("no return value specified for ValidatePassword")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = returnFunc(ctx, hashedPassword, plainPassword)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// CryptoService_ValidatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatePassword'
type CryptoService_ValidatePassword_Call struct {
	*mock.Call
}

// ValidatePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - hashedPassword string
//   - plainPassword string
func (_e *CryptoService_Expecter) ValidatePassword(ctx interface{}, hashedPassword interface{}, plainPassword interface{}) *CryptoService_ValidatePassword_Call {
	return &CryptoService_ValidatePassword_Call{Call: _e.mock.On("ValidatePassword", ctx, hashedPassword, plainPassword)}
}

func (_c *CryptoService_ValidatePassword_Call) Run(run func(ctx context.Context, hashedPassword string, plainPassword string)) *CryptoService_ValidatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *CryptoService_ValidatePassword_Call) Return(isValid bool) *CryptoService_ValidatePassword_Call {
	_c.Call.Return(isValid)
	return _c
}

func (_c *CryptoService_ValidatePassword_Call) RunAndReturn(run func(ctx context.Context, hashedPassword string, plainPassword string) bool) *CryptoService_ValidatePassword_Call {
	_c.Call.Return(run)
	return _c
}
