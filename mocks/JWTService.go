// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/golang-jwt/jwt/v5"
	mock "github.com/stretchr/testify/mock"
)

// NewJWTService creates a new instance of JWTService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJWTService(t interface {
	mock.TestingT
	Cleanup(func())
}) *JWTService {
	mock := &JWTService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// JWTService is an autogenerated mock type for the JWTService type
type JWTService struct {
	mock.Mock
}

type JWTService_Expecter struct {
	mock *mock.Mock
}

func (_m *JWTService) EXPECT() *JWTService_Expecter {
	return &JWTService_Expecter{mock: &_m.Mock}
}

// GenerateToken provides a mock function for the type JWTService
func (_mock *JWTService) GenerateToken(ctx context.Context, userID int64) (string, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (string, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) string); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// JWTService_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type JWTService_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *JWTService_Expecter) GenerateToken(ctx interface{}, userID interface{}) *JWTService_GenerateToken_Call {
	return &JWTService_GenerateToken_Call{Call: _e.mock.On("GenerateToken", ctx, userID)}
}

func (_c *JWTService_GenerateToken_Call) Run(run func(ctx context.Context, userID int64)) *JWTService_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *JWTService_GenerateToken_Call) Return(token string, err error) *JWTService_GenerateToken_Call {
	_c.Call.Return(token, err)
	return _c
}

func (_c *JWTService_GenerateToken_Call) RunAndReturn(run func(ctx context.Context, userID int64) (string, error)) *JWTService_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateToken provides a mock function for the type JWTService
func (_mock *JWTService) ValidateToken(ctx context.Context, tokenString string) (*jwt.Token, error) {
	ret := _mock.Called(ctx, tokenString)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 *jwt.Token
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*jwt.Token, error)); ok {
		return returnFunc(ctx, tokenString)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *jwt.Token); ok {
		r0 = returnFunc(ctx, tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, tokenString)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// JWTService_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type JWTService_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - ctx context.Context
//   - tokenString string
func (_e *JWTService_Expecter) ValidateToken(ctx interface{}, tokenString interface{}) *JWTService_ValidateToken_Call {
	return &JWTService_ValidateToken_Call{Call: _e.mock.On("ValidateToken", ctx, tokenString)}
}

func (_c *JWTService_ValidateToken_Call) Run(run func(ctx context.Context, tokenString string)) *JWTService_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *JWTService_ValidateToken_Call) Return(token *jwt.Token, err error) *JWTService_ValidateToken_Call {
	_c.Call.Return(token, err)
	return _c
}

func (_c *JWTService_ValidateToken_Call) RunAndReturn(run func(ctx context.Context, tokenString string) (*jwt.Token, error)) *JWTService_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}
