// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewRedisRepository creates a new instance of RedisRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRedisRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *RedisRepository {
	mock := &RedisRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// RedisRepository is an autogenerated mock type for the RedisRepository type
type RedisRepository struct {
	mock.Mock
}

type RedisRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *RedisRepository) EXPECT() *RedisRepository_Expecter {
	return &RedisRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type RedisRepository
func (_mock *RedisRepository) Delete(key string) error {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// RedisRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type RedisRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - key string
func (_e *RedisRepository_Expecter) Delete(key interface{}) *RedisRepository_Delete_Call {
	return &RedisRepository_Delete_Call{Call: _e.mock.On("Delete", key)}
}

func (_c *RedisRepository_Delete_Call) Run(run func(key string)) *RedisRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *RedisRepository_Delete_Call) Return(err error) *RedisRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *RedisRepository_Delete_Call) RunAndReturn(run func(key string) error) *RedisRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type RedisRepository
func (_mock *RedisRepository) Get(key string) (string, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// RedisRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type RedisRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *RedisRepository_Expecter) Get(key interface{}) *RedisRepository_Get_Call {
	return &RedisRepository_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *RedisRepository_Get_Call) Run(run func(key string)) *RedisRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *RedisRepository_Get_Call) Return(s string, err error) *RedisRepository_Get_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *RedisRepository_Get_Call) RunAndReturn(run func(key string) (string, error)) *RedisRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type RedisRepository
func (_mock *RedisRepository) Set(key string, value interface{}, exp time.Duration) error {
	ret := _mock.Called(key, value, exp)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, interface{}, time.Duration) error); ok {
		r0 = returnFunc(key, value, exp)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// RedisRepository_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type RedisRepository_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key string
//   - value interface{}
//   - exp time.Duration
func (_e *RedisRepository_Expecter) Set(key interface{}, value interface{}, exp interface{}) *RedisRepository_Set_Call {
	return &RedisRepository_Set_Call{Call: _e.mock.On("Set", key, value, exp)}
}

func (_c *RedisRepository_Set_Call) Run(run func(key string, value interface{}, exp time.Duration)) *RedisRepository_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		var arg2 time.Duration
		if args[2] != nil {
			arg2 = args[2].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *RedisRepository_Set_Call) Return(err error) *RedisRepository_Set_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *RedisRepository_Set_Call) RunAndReturn(run func(key string, value interface{}, exp time.Duration) error) *RedisRepository_Set_Call {
	_c.Call.Return(run)
	return _c
}
