// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/acidspud/coding-challange/transport/request"
	mock "github.com/stretchr/testify/mock"
)

// NewAuthUsecase creates a new instance of AuthUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthUsecase {
	mock := &AuthUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AuthUsecase is an autogenerated mock type for the AuthUsecase type
type AuthUsecase struct {
	mock.Mock
}

type AuthUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthUsecase) EXPECT() *AuthUsecase_Expecter {
	return &AuthUsecase_Expecter{mock: &_m.Mock}
}

// SignIn provides a mock function for the type AuthUsecase
func (_mock *AuthUsecase) SignIn(ctx context.Context, request1 *request.SignInReq) (string, error) {
	ret := _mock.Called(ctx, request1)

	if len(ret) == 0 {
		panic("no return value specified for SignIn")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *request.SignInReq) (string, error)); ok {
		return returnFunc(ctx, request1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *request.SignInReq) string); ok {
		r0 = returnFunc(ctx, request1)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *request.SignInReq) error); ok {
		r1 = returnFunc(ctx, request1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AuthUsecase_SignIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignIn'
type AuthUsecase_SignIn_Call struct {
	*mock.Call
}

// SignIn is a helper method to define mock.On call
//   - ctx context.Context
//   - request1 *request.SignInReq
func (_e *AuthUsecase_Expecter) SignIn(ctx interface{}, request1 interface{}) *AuthUsecase_SignIn_Call {
	return &AuthUsecase_SignIn_Call{Call: _e.mock.On("SignIn", ctx, request1)}
}

func (_c *AuthUsecase_SignIn_Call) Run(run func(ctx context.Context, request1 *request.SignInReq)) *AuthUsecase_SignIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *request.SignInReq
		if args[1] != nil {
			arg1 = args[1].(*request.SignInReq)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AuthUsecase_SignIn_Call) Return(s string, err error) *AuthUsecase_SignIn_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *AuthUsecase_SignIn_Call) RunAndReturn(run func(ctx context.Context, request1 *request.SignInReq) (string, error)) *AuthUsecase_SignIn_Call {
	_c.Call.Return(run)
	return _c
}

// SignUp provides a mock function for the type AuthUsecase
func (_mock *AuthUsecase) SignUp(ctx context.Context, request1 *request.SignUpReq) error {
	ret := _mock.Called(ctx, request1)

	if len(ret) == 0 {
		panic("no return value specified for SignUp")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *request.SignUpReq) error); ok {
		r0 = returnFunc(ctx, request1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AuthUsecase_SignUp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignUp'
type AuthUsecase_SignUp_Call struct {
	*mock.Call
}

// SignUp is a helper method to define mock.On call
//   - ctx context.Context
//   - request1 *request.SignUpReq
func (_e *AuthUsecase_Expecter) SignUp(ctx interface{}, request1 interface{}) *AuthUsecase_SignUp_Call {
	return &AuthUsecase_SignUp_Call{Call: _e.mock.On("SignUp", ctx, request1)}
}

func (_c *AuthUsecase_SignUp_Call) Run(run func(ctx context.Context, request1 *request.SignUpReq)) *AuthUsecase_SignUp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *request.SignUpReq
		if args[1] != nil {
			arg1 = args[1].(*request.SignUpReq)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AuthUsecase_SignUp_Call) Return(err error) *AuthUsecase_SignUp_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AuthUsecase_SignUp_Call) RunAndReturn(run func(ctx context.Context, request1 *request.SignUpReq) error) *AuthUsecase_SignUp_Call {
	_c.Call.Return(run)
	return _c
}
