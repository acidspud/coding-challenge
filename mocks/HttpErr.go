// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewHttpErr creates a new instance of HttpErr. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHttpErr(t interface {
	mock.TestingT
	Cleanup(func())
}) *HttpErr {
	mock := &HttpErr{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// HttpErr is an autogenerated mock type for the HttpErr type
type HttpErr struct {
	mock.Mock
}

type HttpErr_Expecter struct {
	mock *mock.Mock
}

func (_m *HttpErr) EXPECT() *HttpErr_Expecter {
	return &HttpErr_Expecter{mock: &_m.Mock}
}

// Details provides a mock function for the type HttpErr
func (_mock *HttpErr) Details() interface{} {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Details")
	}

	var r0 interface{}
	if returnFunc, ok := ret.Get(0).(func() interface{}); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	return r0
}

// HttpErr_Details_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Details'
type HttpErr_Details_Call struct {
	*mock.Call
}

// Details is a helper method to define mock.On call
func (_e *HttpErr_Expecter) Details() *HttpErr_Details_Call {
	return &HttpErr_Details_Call{Call: _e.mock.On("Details")}
}

func (_c *HttpErr_Details_Call) Run(run func()) *HttpErr_Details_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *HttpErr_Details_Call) Return(ifaceVal interface{}) *HttpErr_Details_Call {
	_c.Call.Return(ifaceVal)
	return _c
}

func (_c *HttpErr_Details_Call) RunAndReturn(run func() interface{}) *HttpErr_Details_Call {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function for the type HttpErr
func (_mock *HttpErr) Error() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Error")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// HttpErr_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type HttpErr_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
func (_e *HttpErr_Expecter) Error() *HttpErr_Error_Call {
	return &HttpErr_Error_Call{Call: _e.mock.On("Error")}
}

func (_c *HttpErr_Error_Call) Run(run func()) *HttpErr_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *HttpErr_Error_Call) Return(s string) *HttpErr_Error_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *HttpErr_Error_Call) RunAndReturn(run func() string) *HttpErr_Error_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function for the type HttpErr
func (_mock *HttpErr) Status() int {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// HttpErr_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type HttpErr_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
func (_e *HttpErr_Expecter) Status() *HttpErr_Status_Call {
	return &HttpErr_Status_Call{Call: _e.mock.On("Status")}
}

func (_c *HttpErr_Status_Call) Run(run func()) *HttpErr_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *HttpErr_Status_Call) Return(n int) *HttpErr_Status_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *HttpErr_Status_Call) RunAndReturn(run func() int) *HttpErr_Status_Call {
	_c.Call.Return(run)
	return _c
}
