// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/acidspud/coding-challange/domain"
	"github.com/acidspud/coding-challange/transport/request"
	mock "github.com/stretchr/testify/mock"
)

// NewItemUsecase creates a new instance of ItemUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewItemUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ItemUsecase {
	mock := &ItemUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ItemUsecase is an autogenerated mock type for the ItemUsecase type
type ItemUsecase struct {
	mock.Mock
}

type ItemUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *ItemUsecase) EXPECT() *ItemUsecase_Expecter {
	return &ItemUsecase_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type ItemUsecase
func (_mock *ItemUsecase) Create(ctx context.Context, request1 *request.CreateItemReq) error {
	ret := _mock.Called(ctx, request1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *request.CreateItemReq) error); ok {
		r0 = returnFunc(ctx, request1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ItemUsecase_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ItemUsecase_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - request1 *request.CreateItemReq
func (_e *ItemUsecase_Expecter) Create(ctx interface{}, request1 interface{}) *ItemUsecase_Create_Call {
	return &ItemUsecase_Create_Call{Call: _e.mock.On("Create", ctx, request1)}
}

func (_c *ItemUsecase_Create_Call) Run(run func(ctx context.Context, request1 *request.CreateItemReq)) *ItemUsecase_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *request.CreateItemReq
		if args[1] != nil {
			arg1 = args[1].(*request.CreateItemReq)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ItemUsecase_Create_Call) Return(err error) *ItemUsecase_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ItemUsecase_Create_Call) RunAndReturn(run func(ctx context.Context, request1 *request.CreateItemReq) error) *ItemUsecase_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type ItemUsecase
func (_mock *ItemUsecase) Delete(ctx context.Context, id int64) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ItemUsecase_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ItemUsecase_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *ItemUsecase_Expecter) Delete(ctx interface{}, id interface{}) *ItemUsecase_Delete_Call {
	return &ItemUsecase_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *ItemUsecase_Delete_Call) Run(run func(ctx context.Context, id int64)) *ItemUsecase_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ItemUsecase_Delete_Call) Return(err error) *ItemUsecase_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ItemUsecase_Delete_Call) RunAndReturn(run func(ctx context.Context, id int64) error) *ItemUsecase_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Fetch provides a mock function for the type ItemUsecase
func (_mock *ItemUsecase) Fetch(ctx context.Context) ([]domain.Item, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 []domain.Item
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]domain.Item, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []domain.Item); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Item)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ItemUsecase_Fetch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fetch'
type ItemUsecase_Fetch_Call struct {
	*mock.Call
}

// Fetch is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ItemUsecase_Expecter) Fetch(ctx interface{}) *ItemUsecase_Fetch_Call {
	return &ItemUsecase_Fetch_Call{Call: _e.mock.On("Fetch", ctx)}
}

func (_c *ItemUsecase_Fetch_Call) Run(run func(ctx context.Context)) *ItemUsecase_Fetch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ItemUsecase_Fetch_Call) Return(items []domain.Item, err error) *ItemUsecase_Fetch_Call {
	_c.Call.Return(items, err)
	return _c
}

func (_c *ItemUsecase_Fetch_Call) RunAndReturn(run func(ctx context.Context) ([]domain.Item, error)) *ItemUsecase_Fetch_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type ItemUsecase
func (_mock *ItemUsecase) GetByID(ctx context.Context, id int64) (domain.Item, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.Item
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (domain.Item, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) domain.Item); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Item)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ItemUsecase_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type ItemUsecase_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *ItemUsecase_Expecter) GetByID(ctx interface{}, id interface{}) *ItemUsecase_GetByID_Call {
	return &ItemUsecase_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *ItemUsecase_GetByID_Call) Run(run func(ctx context.Context, id int64)) *ItemUsecase_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ItemUsecase_GetByID_Call) Return(item domain.Item, err error) *ItemUsecase_GetByID_Call {
	_c.Call.Return(item, err)
	return _c
}

func (_c *ItemUsecase_GetByID_Call) RunAndReturn(run func(ctx context.Context, id int64) (domain.Item, error)) *ItemUsecase_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type ItemUsecase
func (_mock *ItemUsecase) Update(ctx context.Context, id int64, request1 *request.UpdateItemReq) error {
	ret := _mock.Called(ctx, id, request1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, *request.UpdateItemReq) error); ok {
		r0 = returnFunc(ctx, id, request1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ItemUsecase_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ItemUsecase_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - request1 *request.UpdateItemReq
func (_e *ItemUsecase_Expecter) Update(ctx interface{}, id interface{}, request1 interface{}) *ItemUsecase_Update_Call {
	return &ItemUsecase_Update_Call{Call: _e.mock.On("Update", ctx, id, request1)}
}

func (_c *ItemUsecase_Update_Call) Run(run func(ctx context.Context, id int64, request1 *request.UpdateItemReq)) *ItemUsecase_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 *request.UpdateItemReq
		if args[2] != nil {
			arg2 = args[2].(*request.UpdateItemReq)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *ItemUsecase_Update_Call) Return(err error) *ItemUsecase_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ItemUsecase_Update_Call) RunAndReturn(run func(ctx context.Context, id int64, request1 *request.UpdateItemReq) error) *ItemUsecase_Update_Call {
	_c.Call.Return(run)
	return _c
}
